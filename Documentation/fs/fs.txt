/* ================ File systems ================ */

/**
 * @defgroup fs File system management
 * @ingroup kernel
 */

/**
 * @defgroup vfs Virtual file system API
 * @ingroup fs
 * @brief Abstraction layer on top of concrete file systems, such as the
 *        ROMFS and RAMFS.
 *
 * The virtual file system is an additional layer in the file system with
 * pure administrative role. Its purpose is to provide a unified API / method
 * to access actual file systems.
 */

/**
 * @defgroup romfs Micro ROM file system
 * @ingroup fs
 * @brief Simple read-only ROM file system.
 *
 * The ROMFS is a non-volatile read-only file system saved on in program
 * memory on harvard achitectures. Files in the ROMFS are built into the
 * application binary during compile time by the crurom tool.
 *
 * To include one or more files in the binary place them in one or more
 * seperate directory's in the directory of your application. Then add
 * the following lines to your application's Kbuild file:
 *
   @code
   crurom-y   := dir1 dir2 .. dirN
   crurom-obj := romfs.o
   @endcode
 * The files generated by the romfs driver can then be accessed as any other
 * using ETA/OS's crt (open, close, read, write, etc..).
 */

/**
 * @defgroup ramfs Volatile RAM file system
 * @ingroup fs
 * @brief A raw volatile in-memory file system.
 *
 * The RAMFS operates purely from buffers stored in (S)RAM.
 */

/**
 * @defgroup devfs Device file system
 * @ingroup fs
 * @brief A file system to allow device drivers to expose an API.
 *
 * Device drivers can use the devfs to export device files, which can be
 * used by other systems in ETA/OS and / or the application running ETA/OS.
 */

