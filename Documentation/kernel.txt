/**
 * @defgroup kernel ETA/OS kernel
 * @brief ETA/OS kernel API
 *
 * The kernel API supports the following features:
 *     - Scheduling/Multithreading
 *     - IRQ management
 *     - Memory management
 *     - I/O drivers
 *     - Timer management
 *
 * @section min-app Minimal application
 * An example of a most minimal application:
 * @code{.c}
#include <etaos/kernel.h>
#include <etaos/types.h>

void main(void)
{
	for(;;);
}
  @endcode
 */

/**
 * @defgroup kern-init ETA/OS initialisation
 * @brief ETA/OS initialisation process.
 *
 * The ETA/OS kernel supports, in cooperation with the architecture, a way
 * to automatically initialise almost all subsystems. The only exceptions
 * to this rule are:
 * 
 * * Scheduler
 * * Device core
 *
 * These two subsystems still need to be manually initialised by the
 * architecture.
 *
 * @section init-gen Automated initialisation
 *
 * To automatically initialise a subsystem, one has to add one of 3 definitions:
 * 
 * * subsys_init
 * * module_init
 * * device_init
 *
 * All 3 basically have the same effect, the only difference is priority and
 * therefore, order. All subsystems labeled with subsys_init will be
 * initialised first. Examples are the I2C core and the USART core. Secondly,
 * the module_init's will be called. Usually drivers behind the subsystems,
 * such as the ATmega I2C bus. At the verry last, the device_init is called
 * initialising all drivers which (usually) depend on another module which
 * has to be already initialised (e.g. and I2C EEPROM chip driver).
 */

/**
 * @defgroup sem Semaphores
 * @ingroup kernel
 * @brief Semaphore API.
 */

/**
 * @defgroup archAPI Architecture API
 * @brief API to access the architecture of the system.
 *
 * All architectures have to implement atleast this API to compile
 * the rest of ETA/OS succesfully.
 */

/**
 * @defgroup arch Architectures
 * @brief Supported architectures
 */

