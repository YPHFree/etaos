/**
 * @defgroup kernel ETA/OS kernel
 * @brief ETA/OS kernel API
 *
 * The kernel API supports the following features:
 *     - Scheduling/Multithreading
 *     - IRQ management
 *     - Memory management
 *     - I/O drivers
 *     - Timer management
 *
 * @section min-app Minimal application
 * An example of a most minimal application:
 * @code{.c}
#include <etaos/kernel.h>
#include <etaos/types.h>

void main(void)
{
	for(;;);
}
  @endcode
 */

/**
 * @defgroup kern-init ETA/OS initialisation
 * @brief ETA/OS initialisation process.
 *
 * The ETA/OS kernel supports, in cooperation with the architecture, a way
 * to automatically initialise almost all subsystems. The only exceptions
 * to this rule are:
 * 
 * * Scheduler
 * * Device core
 *
 * These two subsystems still need to be manually initialised by the
 * architecture.
 *
 * @section init-gen Automated initialisation
 *
 * To automatically initialise a subsystem, one has to add one of 4 definitions:
 * 
 * * subsys_init
 * * module_init
 * * device_init
 * * chip_init
 *
 * All 4 basically have the same effect, the only difference is priority and
 * therefore, order. All subsystems labeled with subsys_init will be
 * initialised first. Examples are the I2C core and the USART core. Secondly,
 * the module_init's will be called. Usually drivers behind the subsystems,
 * such as the ATmega I2C bus. Thirdly, the device_init is called
 * initialising all drivers which (usually) depend on another module which
 * has to be already initialised (e.g. and I2C EEPROM chip driver). The
 * systems initialised with chip_init are initialised last.
 */

/**
 * @defgroup sem Semaphores
 * @ingroup kernel
 * @brief Semaphore API.
 */

/**
 * @defgroup archAPI Architecture API
 * @brief API to access the architecture of the system.
 *
 * All architectures have to implement atleast this API to compile
 * the rest of ETA/OS succesfully.
 *
 * @section Stacks
 *
 * Stacks are generally allocated by the responsible subsystem. This can be
 * a device driver, the application or in the case of the idle stack the
 * scheduling core. This is not true for the main stack. The main stack is
 * the stack that is used to run the thread that eventually calls the
 * `main()` function. The architecture API is responsible for the provision of
 * pointer to the starting address of the main stack called `main_stack_ptr_start`.
 * The end address of this memory region should be
 * `main_stack_ptr_start + CONFIG_STACK_SIZE`. How this stack is allocated is
 * entirely up to the implementation of the architecture.
 */

/**
 * @defgroup arch Architectures
 * @brief Supported architectures.
 *
 * ETA/OS is capable of supporting a wide variety of architectures. For more
 * implementation specific details (i.e. the API an architecture needs to
 * provide), see the Architecture API module.
 */

/**
 * @defgroup power Power management
 * @brief Power management module.
 *
 * Platform independent power management. Please note that some modes may
 * not be supported by specific architectures. Configureation options are
 * available to allow the scheduler to enter hibernation mode in the idle
 * thread.
 */

